import 'package:flutter/material.dart';
import 'package:ibooking/Vbooking.dart';

const Color kPrimaryDark = Color.fromARGB(255, 24, 42, 94); // dark blue
const Color kApproved = Color(0xFF2ECC71); // green
const Color kPending = Color(0xFFE1B12C); // mustard yellow
const Color kHoliday = Color(0xFFE74C3C); // red
const Color kBorder = Color(0xFFCFD6DE);
const Color kGreyBg = Color(0xFFF2F3F7);

class VCalendarPage extends StatefulWidget {
  const VCalendarPage({super.key});
  @override
  State<VCalendarPage> createState() => _VCalendarPageState();
}

class _VCalendarPageState extends State<VCalendarPage> {
  // Use a long-running page controller so swipes can go far back/forward
  final PageController _pageController = PageController(initialPage: 120);
  DateTime _baseMonth = DateTime(DateTime.now().year, DateTime.now().month, 1);

  // Dummy status data (just for demo)
  // Map day -> list of bookings. Each booking is a small map for demo purposes.
  // In a real app you'd use a Booking model and key by full date.
  final Map<int, List<Map<String, String>>> bookingsByDay = {
    5: [
      {'name': 'SHERA', 'department': 'Engineering', 'time': '10:00 AM – 3:00 PM', 'status': 'APPROVED', 'vehicle': 'Car'},
    ],
    9: [
      {'name': 'SAMIR', 'department': 'HR', 'time': '2:00 PM – 5:00 PM', 'status': 'PENDING', 'vehicle': 'Van'},
    ],
    14: [
      {'name': 'AMIRUL', 'department': 'Admin', 'time': '9:00 AM – 1:00 PM', 'status': 'APPROVED', 'vehicle': 'Bus'},
      {'name': 'RIZAL', 'department': 'Admin', 'time': '2:00 PM – 4:00 PM', 'status': 'PENDING', 'vehicle': 'Car'},
    ],
    22: [
      {'name': 'JASON', 'department': 'Engineering', 'time': '11:00 AM – 2:00 PM', 'status': 'APPROVED', 'vehicle': 'Van'},
    ],
    25: [
      {'name': 'PUBLIC HOLIDAY', 'department': '', 'time': '', 'status': 'HOLIDAY', 'vehicle': ''},
    ],
  };

  static const _monthNames = <String>[
    'January', 'February', 'March', 'April', 'May', 'June',
    'July', 'August', 'September', 'October', 'November', 'December'
  ];

  DateTime _monthForPage(int page) {
    final offset = page - 120;
    return DateTime(_baseMonth.year, _baseMonth.month + offset, 1);
  }



  // Track selected date and its booking details
  DateTime? _selectedDate;
  // For selected date show list of bookings
  List<Map<String, String>>? _bookingsForSelectedDate;

  // bottom navigation state
  int _bottomNavIndex = 0;
  // whether the user has tapped the bottom nav (controls when to show yellow)
  bool _hasUserSelectedBottomNav = false;

  void _onDateTapped(DateTime month, int day) {
    final selectedDate = DateTime(month.year, month.month, day);

    setState(() {
      _selectedDate = selectedDate;
      // populate bookings list for the selected date
      if (bookingsByDay.containsKey(day)) {
        _bookingsForSelectedDate = bookingsByDay[day];
      } else {
        _bookingsForSelectedDate = null;
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: kGreyBg,
      appBar: AppBar(
        backgroundColor: kPrimaryDark,
        elevation: 0,
        leading: IconButton(
          icon: const Icon(Icons.arrow_back_ios_new_rounded, color: Colors.white),
          onPressed: () => Navigator.pop(context),
        ),
        title: const Text('Leave',
            style: TextStyle(color: Colors.white, fontWeight: FontWeight.bold)),
      ),
      body: SafeArea(
        child: SingleChildScrollView(  // Wrap the entire body in a scrollable view
          child: Column(
            children: [
              // Calendar card
              Container(
                margin: const EdgeInsets.all(12),
                padding: const EdgeInsets.fromLTRB(12, 16, 12, 20),
                decoration: BoxDecoration(
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(18),
                  boxShadow: [
                    BoxShadow(
                      color: Colors.black.withOpacity(0.06),
                      blurRadius: 8,
                      offset: const Offset(0, 3),
                    ),
                  ],
                ),
                child: Column(
                  children: [
                    // Swipeable month header + grid. Use a computed height to avoid overflow
                    Builder(builder: (context) {
                      return SizedBox(
                        height: _calendarHeightForPage(context),
                        child: PageView.builder(
                          controller: _pageController,
                          onPageChanged: (_) => setState(() {}),
                          itemBuilder: (context, page) {
                            final month = _monthForPage(page);
                            return Column(
                              children: [
                                _monthHeader(month),
                                const SizedBox(height: 8),
                                _weekHeader(),
                                const SizedBox(height: 8),
                                _monthGrid(month),
                              ],
                            );
                          },
                        ),
                      );
                    }),
                  ],
                ),
              ),

              // Location strip
              Container(
                margin: const EdgeInsets.symmetric(horizontal: 12, vertical: 14),
                padding: const EdgeInsets.symmetric(vertical: 14),
                decoration: BoxDecoration(
                  color: const Color(0xFFE9EDF3),
                  borderRadius: BorderRadius.circular(8),
                ),
                alignment: Alignment.center,
                child: const Text(
                  'PERKESO JALAN AMPANG',
                  style: TextStyle(
                    color: Color(0xFF2E3A59),
                    fontWeight: FontWeight.bold,
                    letterSpacing: 0.7,
                  ),
                ),
              ),

              // Show booking details when a date is selected
              _selectedDate != null
                  ? Padding(
                      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 10),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start, // Align left
                        children: [
                          // If it's a holiday with only that label, show single label
                          if (_bookingsForSelectedDate != null &&
                              _bookingsForSelectedDate!.length == 1 &&
                              _bookingsForSelectedDate!.first['status'] == 'HOLIDAY') ...[
                            Text(
                              'PUBLIC HOLIDAY',
                              style: const TextStyle(
                                  color: kHoliday, fontSize: 18, fontWeight: FontWeight.bold),
                            ),
                          ] else if (_bookingsForSelectedDate != null) ...[
                            // List bookings as tappable cards
                            ..._bookingsForSelectedDate!.map((b) {
                              return Padding(
                                padding: const EdgeInsets.only(bottom: 10),
                                child: InkWell(
                                  onTap: () {
                                    // show details dialog for this booking
                                    showDialog(
                                      context: context,
                                      builder: (ctx) => AlertDialog(
                                        title: Text(b['name'] ?? ''),
                                        content: Column(
                                          mainAxisSize: MainAxisSize.min,
                                          crossAxisAlignment: CrossAxisAlignment.start,
                                          children: [
                                            Text('Department: ${b['department'] ?? ''}'),
                                            const SizedBox(height: 6),
                                            Text('Date: ${_selectedDate?.day}/${_selectedDate?.month}/${_selectedDate?.year}'),
                                            const SizedBox(height: 6),
                                            if (b['time'] != null && b['time']!.isNotEmpty) Text('Time: ${b['time']}'),
                                            if (b['vehicle'] != null && b['vehicle']!.isNotEmpty) ...[
                                              const SizedBox(height: 6),
                                              Text('Vehicle: ${b['vehicle']}'),
                                            ],
                                            const SizedBox(height: 10),
                                            Container(
                                              padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                                              decoration: BoxDecoration(
                                                color: b['status'] == 'APPROVED'
                                                    ? kApproved
                                                    : b['status'] == 'PENDING'
                                                        ? kPending
                                                        : kHoliday,
                                                borderRadius: BorderRadius.circular(16),
                                              ),
                                              child: Text(
                                                b['status'] ?? '',
                                                style: const TextStyle(color: Colors.white, fontWeight: FontWeight.bold),
                                              ),
                                            ),
                                          ],
                                        ),
                                        actions: [
                                          TextButton(onPressed: () => Navigator.of(ctx).pop(), child: const Text('Close')),
                                        ],
                                      ),
                                    );
                                  },
                                  child: Container(
                                    padding: const EdgeInsets.all(12),
                                    decoration: BoxDecoration(
                                      color: Colors.white,
                                      borderRadius: BorderRadius.circular(8),
                                      border: Border.all(color: kBorder),
                                    ),
                                    child: Row(
                                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                      children: [
                                        Expanded(
                                          child: Column(
                                            crossAxisAlignment: CrossAxisAlignment.start,
                                            children: [
                                              Text(b['name'] ?? '', style: const TextStyle(fontWeight: FontWeight.bold, fontSize: 16)),
                                              const SizedBox(height: 4),
                                              Text(b['department'] ?? '', style: const TextStyle(color: Colors.black54)),
                                              const SizedBox(height: 4),
                                              Text('${_selectedDate?.day}/${_selectedDate?.month}/${_selectedDate?.year}${b['time'] != null && b['time']!.isNotEmpty ? ' • ${b['time']}' : ''}', style: const TextStyle(color: Colors.black87)),
                                            ],
                                          ),
                                        ),
                                        const SizedBox(width: 8),
                                        Container(
                                          padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 6),
                                          decoration: BoxDecoration(
                                            color: b['status'] == 'APPROVED'
                                                ? kApproved
                                                : b['status'] == 'PENDING'
                                                    ? kPending
                                                    : kHoliday,
                                            borderRadius: BorderRadius.circular(14),
                                          ),
                                          child: Text(b['status'] ?? '', style: const TextStyle(color: Colors.white, fontWeight: FontWeight.bold)),
                                        )
                                      ],
                                    ),
                                  ),
                                ),
                              );
                            }).toList(),
                          ] else ...[
                            // No booking message
                            Text('No bookings for this date', style: const TextStyle(color: Colors.black54)),
                          ],
                        ],
                      ),
                    )
                  : Container(),

              // Empty space at the bottom for scroll
              const SizedBox(height: 24),
            ],
          ),
        ),
      ),
      bottomNavigationBar: BottomNavigationBar(
        currentIndex: _bottomNavIndex,
        onTap: (i) {
          setState(() {
            _bottomNavIndex = i;
            _hasUserSelectedBottomNav = true; // user explicitly selected an item
          });

          if (i == 0) {
            // Summary - navigate or refresh calendar view
            // If already on calendar, do nothing. If coming from elsewhere, you may push/pop accordingly.
          } else if (i == 1) {
            // Booked Vehicle - navigate to vehicle booking page
            Navigator.of(context).push(MaterialPageRoute(builder: (_) => const VBookingPage()));
          } else if (i == 2) {
            // My Booking - no action yet (placeholder)
          }
        },
        type: BottomNavigationBarType.fixed,
        backgroundColor: kPrimaryDark,
        // Only show mustard when user explicitly clicked an item; otherwise remain white
        selectedItemColor: _hasUserSelectedBottomNav ? kPending : Colors.white,
        unselectedItemColor: Colors.white70,
        items: const [
          BottomNavigationBarItem(icon: Icon(Icons.grid_view_outlined), label: 'Summary'),
          BottomNavigationBarItem(icon: Icon(Icons.add), label: 'Booked Vehicle'),
          BottomNavigationBarItem(icon: Icon(Icons.calendar_today_outlined), label: 'My Booking'),
        ],
      ),
    );
  }

  // ----- Pieces -----
  Widget _monthHeader(DateTime month) {
    final title = '${_monthNames[month.month - 1]} ${month.year}';
    return Row(
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      children: [
        IconButton(
          icon: const Icon(Icons.arrow_back_ios_new_rounded, size: 18),
          color: kPrimaryDark,
          onPressed: () {
            if (_pageController.hasClients) {
              _pageController.previousPage(
                duration: const Duration(milliseconds: 200), curve: Curves.easeOut);
            } else {
              // fallback: jump one page relative to initial
              _pageController.jumpToPage((_pageController.initialPage) - 1);
            }
          },
        ),
        Text(title,
            style: const TextStyle(
                fontSize: 16, fontWeight: FontWeight.bold, color: Color(0xFF2E3A59))),
        IconButton(
          icon: const Icon(Icons.arrow_forward_ios_rounded, size: 18),
          color: kPrimaryDark,
          onPressed: () {
            if (_pageController.hasClients) {
              _pageController.nextPage(
                duration: const Duration(milliseconds: 200), curve: Curves.easeOut);
            } else {
              _pageController.jumpToPage((_pageController.initialPage) + 1);
            }
          },
        ),
      ],
    );
  }

  Widget _weekHeader() {
    const days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
    return Row(
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      children: days.map((d) => Expanded(
        child: Center(
          child: Text(d, style: const TextStyle(
            color: Color(0xFF8B97A6), fontWeight: FontWeight.bold, fontSize: 13))),
      )).toList(),
    );
  }

  Widget _monthGrid(DateTime month) {
    final daysInMonth = DateUtils.getDaysInMonth(month.year, month.month);
    final firstWeekday = DateTime(month.year, month.month, 1).weekday % 7; // Sun=0
    final totalCells = ((firstWeekday + daysInMonth + 6) ~/ 7) * 7; // full weeks

    return GridView.builder(
      physics: const NeverScrollableScrollPhysics(),
      shrinkWrap: true,
      itemCount: totalCells,
      gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
        crossAxisCount: 7, crossAxisSpacing: 8, mainAxisSpacing: 8),
      itemBuilder: (_, i) {
        final day = i - firstWeekday + 1;
        if (day < 1 || day > daysInMonth) {
          return const SizedBox();
        }
        // whether the day is selected on the currently-visible month
        final isSelected = _selectedDate != null
            && _selectedDate!.year == month.year
            && _selectedDate!.month == month.month
            && _selectedDate!.day == day;

  // determine special statuses from the bookingsByDay map
  final bookingsForDay = bookingsByDay[day];
  final isHoliday = bookingsForDay != null && bookingsForDay.any((b) => (b['status'] ?? '') == 'HOLIDAY');
  final isApproved = bookingsForDay != null && bookingsForDay.any((b) => (b['status'] ?? '') == 'APPROVED');
  final isPending = bookingsForDay != null && bookingsForDay.any((b) => (b['status'] ?? '') == 'PENDING');

        Color backgroundColor = Colors.transparent;
        Color borderColor = kBorder;
        Color textColor = const Color(0xFF2E3A59);

        if (isSelected) {
          backgroundColor = kPrimaryDark;
          borderColor = kPrimaryDark;
          textColor = Colors.white;
        } else if (isHoliday) {
          // holiday takes priority
          backgroundColor = kHoliday; // red filled box for holiday
          borderColor = kHoliday;
          textColor = Colors.white;
        } else if (isApproved) {
          backgroundColor = kApproved; // green filled box for approved
          borderColor = kApproved;
          textColor = Colors.white;
        } else if (isPending) {
          backgroundColor = kPending; // mustard filled box for pending
          borderColor = kPending;
          textColor = Colors.white;
        }

        return GestureDetector(
          onTap: () => _onDateTapped(month, day), // pass month so selected date is correct
          child: Container(
            decoration: BoxDecoration(
              color: backgroundColor,
              borderRadius: BorderRadius.circular(8),
              border: Border.all(color: borderColor, width: 1.25),
            ),
            alignment: Alignment.center,
            child: Text(
              '$day',
              style: TextStyle(
                color: textColor,
                fontWeight: FontWeight.w700,
              ),
            ),
          ),
        );
      },
    );
  }

  // Compute the height needed for a calendar page given screen size and month.
  double _calendarHeightForPage(BuildContext context) {
    // mirror the spacing used in the widget tree to calculate total height
    final month = _monthForPage(_pageController.hasClients ? _pageController.page?.round() ?? 120 : 120);
    final daysInMonth = DateUtils.getDaysInMonth(month.year, month.month);
    final firstWeekday = DateTime(month.year, month.month, 1).weekday % 7;
    final rows = ((firstWeekday + daysInMonth + 6) ~/ 7);

    final screenW = MediaQuery.of(context).size.width;
    // container margin 12*2 and padding 12*2 (left/right) => subtract 48
    final availableWidth = screenW - 48;
    final totalCrossSpacing = 8.0 * (7 - 1);
    final cellWidth = (availableWidth - totalCrossSpacing) / 7.0;
    final cellHeight = cellWidth * 0.95; // slightly shorter than width

    final headerHeight = 44.0; // month header
    final weekHeaderHeight = 28.0;
    final verticalGaps = 8.0 + 8.0; // SizedBox heights between pieces
    final gridSpacing = 8.0 * (rows > 0 ? (rows - 1) : 0);
    final containerVerticalPadding = 16.0 + 20.0; // top and bottom padding of outer container

    final totalHeight = headerHeight + weekHeaderHeight + verticalGaps + (rows * cellHeight) + gridSpacing + containerVerticalPadding + 8.0;
    return totalHeight;
  }
}

// Simple placeholder page for My Booking
class _MyBookingsPage extends StatelessWidget {
  const _MyBookingsPage({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('My Booking'), backgroundColor: kPrimaryDark),
      body: const Center(
        child: Text('My bookings will appear here.'),
      ),
    );
  }
}



